[
    {
        "answer": "SELECT COUNT(*) FROM head WHERE age > 56",
        "question": "How many heads of the departments are older than 56 ?",
        "context": "CREATE TABLE head (age INTEGER)"
    },
    {
        "answer": "SELECT name, born_state, age FROM head ORDER BY age",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "context": "CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)"
    },
    {
        "answer": "SELECT creation, name, budget_in_billions FROM department",
        "question": "List the creation year, name and budget of each department.",
        "context": "CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)"
    },
    {
        "answer": "SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department",
        "question": "What are the maximum and minimum budget of the departments?",
        "context": "CREATE TABLE department (budget_in_billions INTEGER)"
    },
    {
        "answer": "SELECT name FROM head WHERE born_state <> 'California'",
        "question": "What are the names of the heads who are born outside the California state?",
        "context": "CREATE TABLE head (name VARCHAR, born_state VARCHAR)"
    },
    {
        "answer": "SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3",
        "question": "What are the names of the states where at least 3 heads were born?",
        "context": "CREATE TABLE head (born_state VARCHAR)"
    },
    {
        "answer": "SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "In which year were most departments established?",
        "context": "CREATE TABLE department (creation VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT temporary_acting) FROM management",
        "question": "How many acting statuses are there?",
        "context": "CREATE TABLE management (temporary_acting VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'",
        "question": "What are the distinct ages of the heads who are acting?",
        "context": "CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)"
    },
    {
        "answer": "SELECT head_id, name FROM head WHERE name LIKE '%Ha%'",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "context": "CREATE TABLE head (head_id VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM farm",
        "question": "How many farms are there?",
        "context": "CREATE TABLE farm (Id VARCHAR)"
    },
    {
        "answer": "SELECT Total_Horses FROM farm ORDER BY Total_Horses",
        "question": "List the total number of horses on farms in ascending order.",
        "context": "CREATE TABLE farm (Total_Horses VARCHAR)"
    },
    {
        "answer": "SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens'",
        "question": "What are the hosts of competitions whose theme is not \"Aliens\"?",
        "context": "CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)"
    },
    {
        "answer": "SELECT Theme FROM farm_competition ORDER BY YEAR",
        "question": "What are the themes of farm competitions sorted by year in ascending order?",
        "context": "CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)"
    },
    {
        "answer": "SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "context": "CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)"
    },
    {
        "answer": "SELECT MAX(Cows), MIN(Cows) FROM farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "context": "CREATE TABLE farm (Cows INTEGER)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Status) FROM city",
        "question": "How many different statuses do cities have?",
        "context": "CREATE TABLE city (Status VARCHAR)"
    },
    {
        "answer": "SELECT Official_Name FROM city ORDER BY Population DESC",
        "question": "List official names of cities in descending order of population.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)"
    },
    {
        "answer": "SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1",
        "question": "List the official name and status of the city with the largest population.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)"
    },
    {
        "answer": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the status of the city that has hosted the greatest number of competitions.",
        "context": "CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)"
    },
    {
        "answer": "SELECT Status, AVG(Population) FROM city GROUP BY Status",
        "question": "Please show the different statuses of cities and the average population of cities with each status.",
        "context": "CREATE TABLE city (Status VARCHAR, Population INTEGER)"
    },
    {
        "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*)",
        "question": "Please show the different statuses, ordered by the number of cities that have each.",
        "context": "CREATE TABLE city (Status VARCHAR)"
    },
    {
        "answer": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common type of Status across cities.",
        "context": "CREATE TABLE city (Status VARCHAR)"
    },
    {
        "answer": "SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition)",
        "question": "List the official names of cities that have not held any competition.",
        "context": "CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)"
    },
    {
        "answer": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
        "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
        "context": "CREATE TABLE city (Status VARCHAR, Population INTEGER)"
    },
    {
        "answer": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
        "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
        "context": "CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)"
    },
    {
        "answer": "SELECT Census_Ranking FROM city WHERE Status <> \"Village\"",
        "question": "Show the census ranking of cities whose status are not \"Village\".",
        "context": "CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)"
    },
    {
        "answer": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "context": "CREATE TABLE student_course_registrations (student_id VARCHAR)"
    },
    {
        "answer": "SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "question": "what are the first name and last name of all candidates?",
        "context": "CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)"
    },
    {
        "answer": "SELECT student_id FROM student_course_attendance",
        "question": "List the id of students who attended some courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR)"
    },
    {
        "answer": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1",
        "question": "What is detail of the student who most recently registered course?",
        "context": "CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
        "question": "How many courses do the student whose id is 171 attend?",
        "context": "CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)"
    },
    {
        "answer": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "context": "CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)"
    },
    {
        "answer": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "question": "Find id of the candidate who most recently accessed the course?",
        "context": "CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)"
    },
    {
        "answer": "SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "context": "CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)"
    },
    {
        "answer": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "context": "CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)"
    },
    {
        "answer": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
        "question": "What are the id of students who registered course 301?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)"
    },
    {
        "answer": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "question": "What is the id of the student who most recently registered course 301?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)"
    },
    {
        "answer": "SELECT course_name FROM courses ORDER BY course_name",
        "question": "List the names of courses in alphabetical order?",
        "context": "CREATE TABLE courses (course_name VARCHAR)"
    },
    {
        "answer": "SELECT first_name FROM people ORDER BY first_name",
        "question": "List the first names of people in alphabetical order?",
        "context": "CREATE TABLE people (first_name VARCHAR)"
    },
    {
        "answer": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "question": "What are the id of students who registered courses or attended courses?",
        "context": "CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)"
    },
    {
        "answer": "SELECT date FROM weather WHERE max_temperature_f > 85",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "context": "CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)"
    },
    {
        "answer": "SELECT name FROM station WHERE lat < 37.5",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "context": "CREATE TABLE station (name VARCHAR, lat INTEGER)"
    },
    {
        "answer": "SELECT city, MAX(lat) FROM station GROUP BY city",
        "question": "For each city, return the highest latitude among its stations.",
        "context": "CREATE TABLE station (city VARCHAR, lat INTEGER)"
    },
    {
        "answer": "SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "context": "CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)"
    },
    {
        "answer": "SELECT AVG(lat), AVG(long) FROM station WHERE city = \"San Jose\"",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "context": "CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)"
    },
    {
        "answer": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "question": "What is the id of the trip that has the shortest duration?",
        "context": "CREATE TABLE trip (id VARCHAR, duration VARCHAR)"
    },
    {
        "answer": "SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "context": "CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT bike_id) FROM trip",
        "question": "From the trip record, find the number of unique bikes.",
        "context": "CREATE TABLE trip (bike_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT city) FROM station",
        "question": "What is the number of distinct cities the stations are located at?",
        "context": "CREATE TABLE station (city VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\"",
        "question": "How many stations does Mountain View city has?",
        "context": "CREATE TABLE station (city VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "context": "CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)"
    },
    {
        "answer": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which bike traveled the most often in zip code 94002?",
        "context": "CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "context": "CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)"
    },
    {
        "answer": "SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "context": "CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)"
    },
    {
        "answer": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "context": "CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)"
    },
    {
        "answer": "SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = \"Palo Alto\")",
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "context": "CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)"
    },
    {
        "answer": "SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10)",
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "context": "CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)"
    },
    {
        "answer": "SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80",
        "question": "When and in what zip code did max temperature reach 80?",
        "context": "CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)"
    },
    {
        "answer": "SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "context": "CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)"
    },
    {
        "answer": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "context": "CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> \"San Francisco\"",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "context": "CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)"
    },
    {
        "answer": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> \"Fog\" AND EVENTS <> \"Rain\"",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "context": "CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)"
    },
    {
        "answer": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "context": "CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)"
    },
    {
        "answer": "SELECT name, lat, city FROM station ORDER BY lat LIMIT 1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "context": "CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)"
    },
    {
        "answer": "SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "context": "CREATE TABLE station (city VARCHAR)"
    },
    {
        "answer": "SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "context": "CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)"
    },
    {
        "answer": "SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "context": "CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)"
    },
    {
        "answer": "SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "context": "CREATE TABLE station (city VARCHAR, lat INTEGER)"
    },
    {
        "answer": "SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "context": "CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)"
    },
    {
        "answer": "SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "context": "CREATE TABLE trip (id VARCHAR, duration VARCHAR)"
    },
    {
        "answer": "SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "context": "CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "context": "CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)"
    },
    {
        "answer": "SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103)",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "context": "CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)"
    },
    {
        "answer": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "context": "CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)"
    },
    {
        "answer": "SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "context": "CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)"
    },
    {
        "answer": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "context": "CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)"
    },
    {
        "answer": "SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "context": "CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM book",
        "question": "How many books are there?",
        "context": "CREATE TABLE book (Id VARCHAR)"
    },
    {
        "answer": "SELECT Writer FROM book ORDER BY Writer",
        "question": "List the writers of the books in ascending alphabetical order.",
        "context": "CREATE TABLE book (Writer VARCHAR)"
    },
    {
        "answer": "SELECT Title FROM book ORDER BY Issues",
        "question": "List the titles of the books in ascending order of issues.",
        "context": "CREATE TABLE book (Title VARCHAR, Issues VARCHAR)"
    },
    {
        "answer": "SELECT Title FROM book WHERE Writer <> \"Elaine Lee\"",
        "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
        "context": "CREATE TABLE book (Title VARCHAR, Writer VARCHAR)"
    },
    {
        "answer": "SELECT Title, Issues FROM book",
        "question": "What are the title and issues of the books?",
        "context": "CREATE TABLE book (Title VARCHAR, Issues VARCHAR)"
    },
    {
        "answer": "SELECT Publication_Date FROM publication ORDER BY Price DESC",
        "question": "What are the dates of publications in descending order of price?",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000",
        "question": "What are the distinct publishers of publications with price higher than 5000000?",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)"
    },
    {
        "answer": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1",
        "question": "List the publisher of the publication with the highest price.",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)"
    },
    {
        "answer": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
        "question": "Show writers who have published a book with price more than 4000000.",
        "context": "CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)"
    },
    {
        "answer": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC",
        "question": "Show the titles of books in descending order of publication price.",
        "context": "CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)"
    },
    {
        "answer": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1",
        "question": "Show publishers that have more than one publication.",
        "context": "CREATE TABLE publication (Publisher VARCHAR)"
    },
    {
        "answer": "SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher",
        "question": "Show different publishers together with the number of publications they have.",
        "context": "CREATE TABLE publication (Publisher VARCHAR)"
    },
    {
        "answer": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1",
        "question": "List the writers who have written more than one book.",
        "context": "CREATE TABLE book (Writer VARCHAR)"
    },
    {
        "answer": "SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication)",
        "question": "List the titles of books that are not published.",
        "context": "CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)"
    },
    {
        "answer": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
        "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
        "context": "CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Publication_Date) FROM publication",
        "question": "What is the number of distinct publication dates?",
        "context": "CREATE TABLE publication (Publication_Date VARCHAR)"
    },
    {
        "answer": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\"",
        "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
        "context": "CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM actor",
        "question": "How many actors are there?",
        "context": "CREATE TABLE actor (Id VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM actor ORDER BY Name",
        "question": "List the name of actors in ascending alphabetical order.",
        "context": "CREATE TABLE actor (Name VARCHAR)"
    },
    {
        "answer": "SELECT Character, Duration FROM actor",
        "question": "What are the characters and duration of actors?",
        "context": "CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM actor WHERE Age <> 20",
        "question": "List the name of actors whose age is not 20.",
        "context": "CREATE TABLE actor (Name VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Character FROM actor ORDER BY age DESC",
        "question": "What are the characters of actors in descending order of age?",
        "context": "CREATE TABLE actor (Character VARCHAR, age VARCHAR)"
    },
    {
        "answer": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "question": "What is the duration of the oldest actor?",
        "context": "CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\"",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "context": "CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT Nominee FROM musical WHERE Award <> \"Tony Award\"",
        "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
    },
    {
        "answer": "SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID",
        "question": "Show names of actors and names of musicals they are in.",
        "context": "CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
    },
    {
        "answer": "SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "context": "CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
    },
    {
        "answer": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3",
        "question": "Show names of musicals which have at least three actors.",
        "context": "CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
    },
    {
        "answer": "SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)"
    },
    {
        "answer": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)"
    },
    {
        "answer": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common result of the musicals.",
        "context": "CREATE TABLE musical (RESULT VARCHAR)"
    },
    {
        "answer": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2",
        "question": "List the nominees that have been nominated more than two musicals.",
        "context": "CREATE TABLE musical (Nominee VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor)",
        "question": "List the name of musicals that do not have actors.",
        "context": "CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
    },
    {
        "answer": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\"",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
    },
    {
        "answer": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\"",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "context": "CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
    },
    {
        "answer": "SELECT email FROM user_profiles WHERE name = 'Mary'",
        "question": "Find the emails of the user named \"Mary\".",
        "context": "CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man'",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "context": "CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM user_profiles",
        "question": "How many users are there?",
        "context": "CREATE TABLE user_profiles (Id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM follows",
        "question": "How many followers does each user have?",
        "context": "CREATE TABLE follows (Id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM follows GROUP BY f1",
        "question": "Find the number of followers for each user.",
        "context": "CREATE TABLE follows (f1 VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM tweets",
        "question": "Find the number of tweets in record.",
        "context": "CREATE TABLE tweets (Id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT UID) FROM tweets",
        "question": "Find the number of users who posted some tweets.",
        "context": "CREATE TABLE tweets (UID VARCHAR)"
    },
    {
        "answer": "SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)"
    },
    {
        "answer": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "question": "Return the text of tweets about the topic 'intern'.",
        "context": "CREATE TABLE tweets (text VARCHAR)"
    },
    {
        "answer": "SELECT name, email FROM user_profiles WHERE followers > 1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)"
    },
    {
        "answer": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "context": "CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
    },
    {
        "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
    },
    {
        "answer": "SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)"
    },
    {
        "answer": "SELECT name, followers FROM user_profiles ORDER BY followers DESC",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
    },
    {
        "answer": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
    },
    {
        "answer": "SELECT text FROM tweets ORDER BY createdate",
        "question": "List the text of all tweets in the order of date.",
        "context": "CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)"
    },
    {
        "answer": "SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "context": "CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
    },
    {
        "answer": "SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "context": "CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)"
    },
    {
        "answer": "SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "context": "CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)"
    },
    {
        "answer": "SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "question": "Find the average number of followers for the users who had some tweets.",
        "context": "CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)"
    },
    {
        "answer": "SELECT MAX(followers), SUM(followers) FROM user_profiles",
        "question": "Find the maximum and total number of followers of all users.",
        "context": "CREATE TABLE user_profiles (followers INTEGER)"
    },
    {
        "answer": "SELECT DISTINCT (catalog_entry_name) FROM catalog_contents",
        "question": "Find the names of all the catalog entries.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)"
    },
    {
        "answer": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\"",
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "context": "CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "context": "CREATE TABLE catalogs (catalog_publisher VARCHAR)"
    },
    {
        "answer": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "context": "CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)"
    },
    {
        "answer": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "context": "CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)"
    },
    {
        "answer": "SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "context": "CREATE TABLE catalog_contents (price_in_euros INTEGER)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1",
        "question": "Find the name of the product that has the smallest capacity.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "context": "CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM catalog_contents",
        "question": "How many products are there in the records?",
        "context": "CREATE TABLE catalog_contents (Id VARCHAR)"
    },
    {
        "answer": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8",
        "question": "Name all the products with next entry ID greater than 8.",
        "context": "CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Aircraft",
        "question": "How many aircrafts do we have?",
        "context": "CREATE TABLE Aircraft (Id VARCHAR)"
    },
    {
        "answer": "SELECT name, distance FROM Aircraft",
        "question": "Show name and distance for all aircrafts.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)"
    },
    {
        "answer": "SELECT aid FROM Aircraft WHERE distance > 1000",
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "context": "CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "context": "CREATE TABLE Aircraft (distance INTEGER)"
    },
    {
        "answer": "SELECT name, distance FROM Aircraft WHERE aid = 12",
        "question": "What is the name and distance for aircraft with id 12?",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)"
    },
    {
        "answer": "SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft",
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "context": "CREATE TABLE Aircraft (distance INTEGER)"
    },
    {
        "answer": "SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "context": "CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)"
    },
    {
        "answer": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)"
    },
    {
        "answer": "SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft)",
        "question": "Show names for all aircrafts with distances more than the average.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Employee",
        "question": "How many employees do we have?",
        "context": "CREATE TABLE Employee (Id VARCHAR)"
    },
    {
        "answer": "SELECT name, salary FROM Employee ORDER BY salary",
        "question": "Show name and salary for all employees sorted by salary.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR)"
    },
    {
        "answer": "SELECT eid FROM Employee WHERE salary > 100000",
        "question": "Show ids for all employees with at least 100000 salary.",
        "context": "CREATE TABLE Employee (eid VARCHAR, salary INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "question": "How many employees have salary between 100000 and 200000?",
        "context": "CREATE TABLE Employee (salary INTEGER)"
    },
    {
        "answer": "SELECT name, salary FROM Employee WHERE eid = 242518965",
        "question": "What is the name and salary for employee with id 242518965?",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)"
    },
    {
        "answer": "SELECT AVG(salary), MAX(salary) FROM Employee",
        "question": "What is average and maximum salary of all employees.",
        "context": "CREATE TABLE Employee (salary INTEGER)"
    },
    {
        "answer": "SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1",
        "question": "Show the id and name of the employee with maximum salary.",
        "context": "CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)"
    },
    {
        "answer": "SELECT name FROM Employee ORDER BY salary LIMIT 3",
        "question": "Show the name of employees with three lowest salaries.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary VARCHAR)"
    },
    {
        "answer": "SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee)",
        "question": "Show names for all employees with salary more than the average.",
        "context": "CREATE TABLE Employee (name VARCHAR, salary INTEGER)"
    },
    {
        "answer": "SELECT eid, salary FROM Employee WHERE name = 'Mark Young'",
        "question": "Show the id and salary of Mark Young.",
        "context": "CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Flight",
        "question": "How many flights do we have?",
        "context": "CREATE TABLE Flight (Id VARCHAR)"
    },
    {
        "answer": "SELECT flno, origin, destination FROM Flight ORDER BY origin",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "context": "CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)"
    },
    {
        "answer": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\"",
        "question": "Show all flight number from Los Angeles.",
        "context": "CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)"
    },
    {
        "answer": "SELECT origin FROM Flight WHERE destination = \"Honolulu\"",
        "question": "Show origins of all flights with destination Honolulu.",
        "context": "CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)"
    },
    {
        "answer": "SELECT flno FROM Flight WHERE distance > 2000",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance INTEGER)"
    },
    {
        "answer": "SELECT AVG(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\"",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "context": "CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)"
    },
    {
        "answer": "SELECT origin, destination FROM Flight WHERE price > 300",
        "question": "Show origin and destination for flights with price higher than 300.",
        "context": "CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)"
    },
    {
        "answer": "SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)"
    },
    {
        "answer": "SELECT flno FROM Flight ORDER BY distance LIMIT 3",
        "question": "Show the flight number of flights with three lowest distances.",
        "context": "CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)"
    },
    {
        "answer": "SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = \"Los Angeles\"",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "context": "CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)"
    },
    {
        "answer": "SELECT origin, COUNT(*) FROM Flight GROUP BY origin",
        "question": "Show all origins and the number of flights from each origin.",
        "context": "CREATE TABLE Flight (origin VARCHAR)"
    },
    {
        "answer": "SELECT destination, COUNT(*) FROM Flight GROUP BY destination",
        "question": "Show all destinations and the number of flights to each destination.",
        "context": "CREATE TABLE Flight (destination VARCHAR)"
    },
    {
        "answer": "SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which origin has most number of flights?",
        "context": "CREATE TABLE Flight (origin VARCHAR)"
    },
    {
        "answer": "SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1",
        "question": "Which destination has least number of flights?",
        "context": "CREATE TABLE Flight (destination VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99",
        "question": "What is the aircraft name for the flight with number 99",
        "context": "CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)"
    },
    {
        "answer": "SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "context": "CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT eid) FROM Certificate",
        "question": "How many employees have certificate.",
        "context": "CREATE TABLE Certificate (eid VARCHAR)"
    },
    {
        "answer": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "question": "Show ids for all employees who don't have a certificate.",
        "context": "CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)"
    },
    {
        "answer": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\"",
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "context": "CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "context": "CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "context": "CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT allergy) FROM Allergy_type",
        "question": "How many allergies are there?",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT allergytype) FROM Allergy_type",
        "question": "How many different allergy types exist?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT allergytype FROM Allergy_type",
        "question": "Show all allergy types.",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT allergy, allergytype FROM Allergy_type",
        "question": "Show all allergies and their types.",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\"",
        "question": "Show all allergies with type food.",
        "context": "CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
    },
    {
        "answer": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\"",
        "question": "What is the type of allergy Cat?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Allergy_type WHERE allergytype = \"animal\"",
        "question": "How many allergies have type animal?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype",
        "question": "Show all allergy types and the number of allergies in each type.",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which allergy type has most number of allergies?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1",
        "question": "Which allergy type has least number of allergies?",
        "context": "CREATE TABLE Allergy_type (allergytype VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Student",
        "question": "How many students are there?",
        "context": "CREATE TABLE Student (Id VARCHAR)"
    },
    {
        "answer": "SELECT Fname, Lname FROM Student",
        "question": "Show first name and last name for all students.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT advisor) FROM Student",
        "question": "How many different advisors are listed?",
        "context": "CREATE TABLE Student (advisor VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT Major FROM Student",
        "question": "Show all majors.",
        "context": "CREATE TABLE Student (Major VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT city_code FROM Student",
        "question": "Show all cities where students live.",
        "context": "CREATE TABLE Student (city_code VARCHAR)"
    },
    {
        "answer": "SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "context": "CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)"
    },
    {
        "answer": "SELECT StuID FROM Student WHERE Sex = 'M'",
        "question": "Show student ids for all male students.",
        "context": "CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Student WHERE age = 18",
        "question": "How many students are age 18?",
        "context": "CREATE TABLE Student (age VARCHAR)"
    },
    {
        "answer": "SELECT StuID FROM Student WHERE age > 20",
        "question": "Show all student ids who are older than 20.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER)"
    },
    {
        "answer": "SELECT city_code FROM Student WHERE LName = \"Kim\"",
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "context": "CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)"
    },
    {
        "answer": "SELECT Advisor FROM Student WHERE StuID = 1004",
        "question": "Who is the advisor of student with ID 1004?",
        "context": "CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\"",
        "question": "How many students live in HKG or CHI?",
        "context": "CREATE TABLE Student (city_code VARCHAR)"
    },
    {
        "answer": "SELECT MIN(age), AVG(age), MAX(age) FROM Student",
        "question": "Show the minimum, average, and maximum age of all students.",
        "context": "CREATE TABLE Student (age INTEGER)"
    },
    {
        "answer": "SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student)",
        "question": "What is the last name of the youngest student?",
        "context": "CREATE TABLE Student (LName VARCHAR, age INTEGER)"
    },
    {
        "answer": "SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student)",
        "question": "Show the student id of the oldest student.",
        "context": "CREATE TABLE Student (StuID VARCHAR, age INTEGER)"
    },
    {
        "answer": "SELECT major, COUNT(*) FROM Student GROUP BY major",
        "question": "Show all majors and corresponding number of students.",
        "context": "CREATE TABLE Student (major VARCHAR)"
    },
    {
        "answer": "SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which major has most number of students?",
        "context": "CREATE TABLE Student (major VARCHAR)"
    },
    {
        "answer": "SELECT age, COUNT(*) FROM Student GROUP BY age",
        "question": "Show all ages and corresponding number of students.",
        "context": "CREATE TABLE Student (age VARCHAR)"
    },
    {
        "answer": "SELECT city_code, COUNT(*) FROM Student GROUP BY city_code",
        "question": "Show all cities and corresponding number of students.",
        "context": "CREATE TABLE Student (city_code VARCHAR)"
    },
    {
        "answer": "SELECT advisor, COUNT(*) FROM Student GROUP BY advisor",
        "question": "Show all advisors and corresponding number of students.",
        "context": "CREATE TABLE Student (advisor VARCHAR)"
    },
    {
        "answer": "SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which advisor has most number of students?",
        "context": "CREATE TABLE Student (advisor VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Has_allergy WHERE Allergy = \"Cat\"",
        "question": "How many students have cat allergies?",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)"
    },
    {
        "answer": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2",
        "question": "Show all student IDs who have at least two allergies.",
        "context": "CREATE TABLE Has_allergy (StuID VARCHAR)"
    },
    {
        "answer": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "question": "What are the student ids of students who don't have any allergies?",
        "context": "CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\"",
        "question": "How many students have a food allergy?",
        "context": "CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
    },
    {
        "answer": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which allergy has most number of students affected?",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)"
    },
    {
        "answer": "SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy",
        "question": "Show all allergies with number of students affected.",
        "context": "CREATE TABLE Has_allergy (Allergy VARCHAR)"
    },
    {
        "answer": "SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "context": "CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)"
    },
    {
        "answer": "SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "context": "CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)"
    },
    {
        "answer": "SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "context": "CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)"
    },
    {
        "answer": "SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "context": "CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)"
    },
    {
        "answer": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)"
    },
    {
        "answer": "SELECT title FROM albums",
        "question": "List every album's title.",
        "context": "CREATE TABLE albums (title VARCHAR)"
    },
    {
        "answer": "SELECT title FROM albums ORDER BY title",
        "question": "List every album ordered by album title in ascending order.",
        "context": "CREATE TABLE albums (title VARCHAR)"
    },
    {
        "answer": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "question": "List every album whose title starts with A in alphabetical order.",
        "context": "CREATE TABLE albums (title VARCHAR)"
    },
    {
        "answer": "SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "context": "CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT SUM(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"",
        "question": "List total amount of  invoice from Chicago, IL.",
        "context": "CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\"",
        "question": "List the number of invoices from Chicago, IL.",
        "context": "CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)"
    },
    {
        "answer": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state",
        "question": "List the number of invoices from the US, grouped by state.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)"
    },
    {
        "answer": "SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the state in the US with the most invoices.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)"
    },
    {
        "answer": "SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = \"CA\"",
        "question": "List the number of invoices and the invoice total from California.",
        "context": "CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)"
    },
    {
        "answer": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "question": "List Aerosmith's albums.",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "question": "How many albums does Billy Cobham has?",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM customers WHERE city = \"Prague\"",
        "question": "How many customers live in Prague city?",
        "context": "CREATE TABLE customers (city VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM customers WHERE state = \"CA\"",
        "question": "How many customers in state of CA?",
        "context": "CREATE TABLE customers (state VARCHAR)"
    },
    {
        "answer": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "question": "What country does Roberto Almeida live?",
        "context": "CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)"
    },
    {
        "answer": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%'",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "context": "CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)"
    },
    {
        "answer": "SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "context": "CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)"
    },
    {
        "answer": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "question": "What is the address of employee Nancy Edwards?",
        "context": "CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)"
    },
    {
        "answer": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "question": "What is employee Nancy Edwards's phone number?",
        "context": "CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)"
    },
    {
        "answer": "SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10",
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "context": "CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "context": "CREATE TABLE employees (city VARCHAR, title VARCHAR)"
    },
    {
        "answer": "SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "context": "CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
    },
    {
        "answer": "SELECT name FROM media_types",
        "question": "List all media types.",
        "context": "CREATE TABLE media_types (name VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT name FROM genres",
        "question": "List all different genre types.",
        "context": "CREATE TABLE genres (name VARCHAR)"
    },
    {
        "answer": "SELECT name FROM playlists",
        "question": "List the name of all playlist.",
        "context": "CREATE TABLE playlists (name VARCHAR)"
    },
    {
        "answer": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "question": "Who is the composer of track Fast As a Shark?",
        "context": "CREATE TABLE tracks (composer VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "question": "How long does track Fast As a Shark has?",
        "context": "CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\"",
        "question": "What is the name of tracks whose genre is Rock?",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)"
    },
    {
        "answer": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "context": "CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"",
        "question": "List name of all tracks in Balls to the Wall.",
        "context": "CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "context": "CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)"
    },
    {
        "answer": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "question": "How much is the track Fast As a Shark?",
        "context": "CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM editor",
        "question": "How many editors are there?",
        "context": "CREATE TABLE editor (Id VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM editor ORDER BY Age",
        "question": "List the names of editors in ascending order of age.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Name, Age FROM editor",
        "question": "What are the names and ages of editors?",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM editor WHERE Age > 25",
        "question": "List the names of editors who are older than 25.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age INTEGER)"
    },
    {
        "answer": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
        "question": "Show the names of editors of age either 24 or 25.",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM editor ORDER BY Age LIMIT 1",
        "question": "What is the name of the youngest editor?",
        "context": "CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
    },
    {
        "answer": "SELECT Age, COUNT(*) FROM editor GROUP BY Age",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "context": "CREATE TABLE editor (Age VARCHAR)"
    },
    {
        "answer": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common age of editors.",
        "context": "CREATE TABLE editor (Age VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT Theme FROM journal",
        "question": "Show the distinct themes of journals.",
        "context": "CREATE TABLE journal (Theme VARCHAR)"
    },
    {
        "answer": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "context": "CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee)",
        "question": "List the names of editors that are not on any journal committee.",
        "context": "CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Accounts",
        "question": "How many accounts do we have?",
        "context": "CREATE TABLE Accounts (Id VARCHAR)"
    },
    {
        "answer": "SELECT account_id, customer_id, account_name FROM Accounts",
        "question": "Show ids, customer ids, names for all accounts.",
        "context": "CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)"
    },
    {
        "answer": "SELECT other_account_details FROM Accounts WHERE account_name = \"338\"",
        "question": "Show other account details for account with name 338.",
        "context": "CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = \"Art\" AND T2.customer_last_name = \"Turcotte\"",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
    },
    {
        "answer": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the customer id and number of accounts with most accounts.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts)",
        "question": "Show the number of all customers without an account.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
        "question": "Show distinct first and last names for all customers with an account.",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT customer_id) FROM Accounts",
        "question": "How many customers have an account?",
        "context": "CREATE TABLE Accounts (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Customers",
        "question": "How many customers do we have?",
        "context": "CREATE TABLE Customers (Id VARCHAR)"
    },
    {
        "answer": "SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "context": "CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)"
    },
    {
        "answer": "SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = \"Aniyah\" AND customer_last_name = \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "context": "CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Customers_cards",
        "question": "Show the number of customer cards.",
        "context": "CREATE TABLE Customers_cards (Id VARCHAR)"
    },
    {
        "answer": "SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "context": "CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)"
    },
    {
        "answer": "SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = \"4560596484842\"",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "context": "CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = \"Debit\"",
        "question": "How many debit cards do we have?",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)"
    },
    {
        "answer": "SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "context": "CREATE TABLE Customers_cards (customer_id VARCHAR)"
    },
    {
        "answer": "SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of cards in each type.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)"
    },
    {
        "answer": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5",
        "question": "Show card type codes with at least 5 cards.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR)"
    },
    {
        "answer": "SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "context": "CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "question": "Show all card type codes.",
        "context": "CREATE TABLE Customers_Cards (card_type_code VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards",
        "question": "Show the number of card types.",
        "context": "CREATE TABLE Customers_Cards (card_type_code VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "question": "Show all transaction types.",
        "context": "CREATE TABLE Financial_Transactions (transaction_type VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions",
        "question": "Show the number of transaction types.",
        "context": "CREATE TABLE Financial_Transactions (transaction_type VARCHAR)"
    },
    {
        "answer": "SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions",
        "question": "What is the average and total transaction amount?",
        "context": "CREATE TABLE Financial_transactions (transaction_amount INTEGER)"
    },
    {
        "answer": "SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
        "question": "Show the card type codes and the number of transactions.",
        "context": "CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)"
    },
    {
        "answer": "SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type",
        "question": "Show the transaction type and the number of transactions.",
        "context": "CREATE TABLE Financial_transactions (transaction_type VARCHAR)"
    },
    {
        "answer": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "context": "CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)"
    },
    {
        "answer": "SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id",
        "question": "Show the account id and the number of transactions for each account",
        "context": "CREATE TABLE Financial_transactions (account_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM track",
        "question": "How many tracks do we have?",
        "context": "CREATE TABLE track (Id VARCHAR)"
    },
    {
        "answer": "SELECT name, LOCATION FROM track",
        "question": "Show the name and location for all tracks.",
        "context": "CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)"
    },
    {
        "answer": "SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "context": "CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)"
    },
    {
        "answer": "SELECT MIN(seating), MAX(seating), AVG(seating) FROM track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "context": "CREATE TABLE track (seating INTEGER)"
    },
    {
        "answer": "SELECT DISTINCT LOCATION FROM track",
        "question": "What are distinct locations where tracks are located?",
        "context": "CREATE TABLE track (LOCATION VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM race",
        "question": "How many races are there?",
        "context": "CREATE TABLE race (Id VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT CLASS FROM race",
        "question": "What are the distinct classes that races can have?",
        "context": "CREATE TABLE race (CLASS VARCHAR)"
    },
    {
        "answer": "SELECT name, CLASS, date FROM race",
        "question": "Show name, class, and date for all races.",
        "context": "CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)"
    },
    {
        "answer": "SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS",
        "question": "Show the race class and number of races in each class.",
        "context": "CREATE TABLE race (CLASS VARCHAR)"
    },
    {
        "answer": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the race class with most number of races.",
        "context": "CREATE TABLE race (CLASS VARCHAR)"
    },
    {
        "answer": "SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2",
        "question": "List the race class with at least two races.",
        "context": "CREATE TABLE race (CLASS VARCHAR)"
    },
    {
        "answer": "SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race)",
        "question": "Show all track names that have had no races.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)"
    },
    {
        "answer": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "context": "CREATE TABLE track (year_opened VARCHAR, seating INTEGER)"
    },
    {
        "answer": "SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
        "question": "Show the name of track and the number of races in each track.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)"
    },
    {
        "answer": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of track with most number of races.",
        "context": "CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)"
    },
    {
        "answer": "SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id",
        "question": "Show the name and date for each race and its track name.",
        "context": "CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)"
    },
    {
        "answer": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "context": "CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM member WHERE Membership_card = 'Black'",
        "question": "How many members have the black membership card?",
        "context": "CREATE TABLE member (Membership_card VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*), address FROM member GROUP BY address",
        "question": "Find the number of members living in each address.",
        "context": "CREATE TABLE member (address VARCHAR)"
    },
    {
        "answer": "SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30",
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "context": "CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)"
    },
    {
        "answer": "SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "context": "CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)"
    },
    {
        "answer": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
        "question": "Which address has both members younger than 30 and members older than 40?",
        "context": "CREATE TABLE member (address VARCHAR, age INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM member WHERE address <> 'Hartford'",
        "question": "How many members are not living in Hartford?",
        "context": "CREATE TABLE member (address VARCHAR)"
    },
    {
        "answer": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black'",
        "question": "Which address do not have any member with the black membership card?",
        "context": "CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)"
    },
    {
        "answer": "SELECT address FROM shop ORDER BY open_year",
        "question": "Show the shop addresses ordered by their opening year.",
        "context": "CREATE TABLE shop (address VARCHAR, open_year VARCHAR)"
    },
    {
        "answer": "SELECT AVG(num_of_staff), AVG(score) FROM shop",
        "question": "What are the average score and average staff number of all shops?",
        "context": "CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)"
    },
    {
        "answer": "SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)",
        "question": "Find the id and address of the shops whose score is below the average score.",
        "context": "CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)"
    },
    {
        "answer": "SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)",
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "context": "CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)"
    },
    {
        "answer": "SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "context": "CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)"
    },
    {
        "answer": "SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "context": "CREATE TABLE happy_hour (shop_id VARCHAR)"
    },
    {
        "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which month has the most happy hours?",
        "context": "CREATE TABLE happy_hour (MONTH VARCHAR)"
    },
    {
        "answer": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2",
        "question": "Which months have more than 2 happy hours?",
        "context": "CREATE TABLE happy_hour (MONTH VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM ALBUM",
        "question": "How many albums are there?",
        "context": "CREATE TABLE ALBUM (Id VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM GENRE",
        "question": "List the names of all music genres.",
        "context": "CREATE TABLE GENRE (Name VARCHAR)"
    },
    {
        "answer": "SELECT * FROM CUSTOMER WHERE State = \"NY\"",
        "question": "Find all the customer information in state NY.",
        "context": "CREATE TABLE CUSTOMER (State VARCHAR)"
    },
    {
        "answer": "SELECT FirstName, LastName FROM EMPLOYEE WHERE City = \"Calgary\"",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "context": "CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT (BillingCountry) FROM INVOICE",
        "question": "What are the distinct billing countries of the invoices?",
        "context": "CREATE TABLE INVOICE (BillingCountry VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "context": "CREATE TABLE ARTIST (Name VARCHAR)"
    },
    {
        "answer": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "context": "CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "context": "CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)"
    },
    {
        "answer": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which artist has the most albums?",
        "context": "CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "context": "CREATE TABLE TRACK (Name VARCHAR)"
    },
    {
        "answer": "SELECT AVG(UnitPrice) FROM TRACK",
        "question": "What is the average unit price of all the tracks?",
        "context": "CREATE TABLE TRACK (UnitPrice INTEGER)"
    },
    {
        "answer": "SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "context": "CREATE TABLE TRACK (Milliseconds INTEGER)"
    },
    {
        "answer": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the most common genre in all tracks?",
        "context": "CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)"
    },
    {
        "answer": "SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID",
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "context": "CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
        "question": "How many tracks belong to rock genre?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "question": "How many customers have email that contains \"gmail.com\"?",
        "context": "CREATE TABLE CUSTOMER (Email VARCHAR)"
    },
    {
        "answer": "SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = \"Leonie\"",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "context": "CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)"
    },
    {
        "answer": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = \"70174\"",
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "context": "CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "question": "How many distinct cities does the employees live in?",
        "context": "CREATE TABLE EMPLOYEE (city VARCHAR)"
    },
    {
        "answer": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "context": "CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)"
    },
    {
        "answer": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = \"Germany\"",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "context": "CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)"
    },
    {
        "answer": "SELECT Phone FROM EMPLOYEE",
        "question": "List the phone numbers of all employees.",
        "context": "CREATE TABLE EMPLOYEE (Phone VARCHAR)"
    },
    {
        "answer": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Latin\" OR T1.Name = \"Pop\"",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "context": "CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
    },
    {
        "answer": "SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "context": "CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)"
    },
    {
        "answer": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "context": "CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)"
    },
    {
        "answer": "SELECT Title FROM ALBUM ORDER BY Title",
        "question": "Please list all album titles in alphabetical order.",
        "context": "CREATE TABLE ALBUM (Title VARCHAR)"
    },
    {
        "answer": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\"",
        "question": "What is the average unit price of rock tracks?",
        "context": "CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)"
    },
    {
        "answer": "SELECT BirthDate FROM EMPLOYEE WHERE City = \"Edmonton\"",
        "question": "What are the birth dates of employees living in Edmonton?",
        "context": "CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT (UnitPrice) FROM TRACK",
        "question": "What are the distinct unit prices of all tracks?",
        "context": "CREATE TABLE TRACK (UnitPrice VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM)",
        "question": "How many artists do not have any album?",
        "context": "CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)"
    },
    {
        "answer": "SELECT customer_phone FROM available_policies",
        "question": "Find all the phone numbers.",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR)"
    },
    {
        "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\"",
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)"
    },
    {
        "answer": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "context": "CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)"
    },
    {
        "answer": "SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements",
        "question": "Find the total and average amount of settlements.",
        "context": "CREATE TABLE settlements (settlement_amount INTEGER)"
    },
    {
        "answer": "SELECT service_name FROM services ORDER BY service_name",
        "question": "List all the services in the alphabetical order.",
        "context": "CREATE TABLE services (service_name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM services",
        "question": "How many services are there?",
        "context": "CREATE TABLE services (Id VARCHAR)"
    },
    {
        "answer": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "context": "CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)"
    },
    {
        "answer": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)"
    },
    {
        "answer": "SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements",
        "question": "What are the maximum and minimum settlement amount on record?",
        "context": "CREATE TABLE settlements (settlement_amount INTEGER)"
    },
    {
        "answer": "SELECT customer_id, customer_name FROM customers ORDER BY customer_id",
        "question": "List all the customers in increasing order of IDs.",
        "context": "CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM enzyme",
        "question": "How many kinds of enzymes are there?",
        "context": "CREATE TABLE enzyme (Id VARCHAR)"
    },
    {
        "answer": "SELECT name FROM enzyme ORDER BY name DESC",
        "question": "List the name of enzymes in descending lexicographical order.",
        "context": "CREATE TABLE enzyme (name VARCHAR)"
    },
    {
        "answer": "SELECT name, LOCATION FROM enzyme",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "context": "CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)"
    },
    {
        "answer": "SELECT MAX(OMIM) FROM enzyme",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "context": "CREATE TABLE enzyme (OMIM INTEGER)"
    },
    {
        "answer": "SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "context": "CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)"
    },
    {
        "answer": "SELECT name FROM enzyme WHERE product <> 'Heme'",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "context": "CREATE TABLE enzyme (name VARCHAR, product VARCHAR)"
    },
    {
        "answer": "SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "context": "CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)"
    },
    {
        "answer": "SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "context": "CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)"
    },
    {
        "answer": "SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "context": "CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)"
    },
    {
        "answer": "SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "context": "CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No'",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "context": "CREATE TABLE medicine (FDA_approved VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction)",
        "question": "How many enzymes do not have any interactions?",
        "context": "CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "context": "CREATE TABLE medicine (FDA_approved VARCHAR)"
    },
    {
        "answer": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "context": "CREATE TABLE enzyme (name VARCHAR)"
    },
    {
        "answer": "SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name",
        "question": "find the number of medicines offered by each trade.",
        "context": "CREATE TABLE medicine (trade_name VARCHAR)"
    },
    {
        "answer": "SELECT school, nickname FROM university ORDER BY founded",
        "question": "List all schools and their nicknames in the order of founded year.",
        "context": "CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)"
    },
    {
        "answer": "SELECT school, LOCATION FROM university WHERE affiliation = 'Public'",
        "question": "List all public schools and their locations.",
        "context": "CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)"
    },
    {
        "answer": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1",
        "question": "When was the school with the largest enrollment founded?",
        "context": "CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)"
    },
    {
        "answer": "SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1",
        "question": "Find the founded year of the newest non public school.",
        "context": "CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT school_id) FROM basketball_match",
        "question": "How many schools are in the basketball match?",
        "context": "CREATE TABLE basketball_match (school_id VARCHAR)"
    },
    {
        "answer": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "question": "What is the highest acc percent score in the competition?",
        "context": "CREATE TABLE basketball_match (acc_percent VARCHAR)"
    },
    {
        "answer": "SELECT AVG(enrollment) FROM university WHERE founded < 1850",
        "question": "What are the average enrollment size of the universities that are founded before 1850?",
        "context": "CREATE TABLE university (enrollment INTEGER, founded INTEGER)"
    },
    {
        "answer": "SELECT SUM(enrollment), MIN(enrollment) FROM university",
        "question": "What is the total and minimum enrollment of all schools?",
        "context": "CREATE TABLE university (enrollment INTEGER)"
    },
    {
        "answer": "SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation",
        "question": "Find the total student enrollment for different affiliation type schools.",
        "context": "CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match)",
        "question": "How many schools do not participate in the basketball match?",
        "context": "CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)"
    },
    {
        "answer": "SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public'",
        "question": "Find the schools that were either founded after 1850 or public.",
        "context": "CREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT affiliation) FROM university",
        "question": "Find how many different affiliation types there are.",
        "context": "CREATE TABLE university (affiliation VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "question": "Find how many school locations have the word 'NY'.",
        "context": "CREATE TABLE university (LOCATION VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation",
        "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.",
        "context": "CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)"
    },
    {
        "answer": "SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "context": "CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)"
    },
    {
        "answer": "SELECT MAX(Enrollment) FROM university",
        "question": "What is the maximum enrollment across all schools?",
        "context": "CREATE TABLE university (Enrollment INTEGER)"
    },
    {
        "answer": "SELECT * FROM basketball_match",
        "question": "List all information regarding the basketball match.",
        "context": "CREATE TABLE basketball_match (Id VARCHAR)"
    },
    {
        "answer": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "context": "CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)"
    },
    {
        "answer": "SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004",
        "question": "the names of models that launched between 2002 and 2004.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)"
    },
    {
        "answer": "SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "context": "CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)"
    },
    {
        "answer": "SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = \"LG-P760\"",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM phone WHERE Company_name = \"Nokia Corporation\"",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (Company_name VARCHAR)"
    },
    {
        "answer": "SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)"
    },
    {
        "answer": "SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = \"Nokia Corporation\"",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "context": "CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)"
    },
    {
        "answer": "SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "context": "CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)"
    },
    {
        "answer": "SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "context": "CREATE TABLE phone (Company_name VARCHAR)"
    },
    {
        "answer": "SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1",
        "question": "List the name of the company that produced more than one phone model.",
        "context": "CREATE TABLE phone (Company_name VARCHAR)"
    },
    {
        "answer": "SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "context": "CREATE TABLE screen_mode (used_kb INTEGER)"
    },
    {
        "answer": "SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "context": "CREATE TABLE phone (Accreditation_type VARCHAR)"
    },
    {
        "answer": "SELECT * FROM chip_model",
        "question": "Find the details for all chip models.",
        "context": "CREATE TABLE chip_model (Id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM chip_model WHERE wifi = 'No'",
        "question": "How many models do not have the wifi function?",
        "context": "CREATE TABLE chip_model (wifi VARCHAR)"
    },
    {
        "answer": "SELECT model_name FROM chip_model ORDER BY launch_year",
        "question": "List all the model names sorted by their launch year.",
        "context": "CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)"
    },
    {
        "answer": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full'",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "context": "CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM country",
        "question": "How many countries are there in total?",
        "context": "CREATE TABLE country (Id VARCHAR)"
    },
    {
        "answer": "SELECT Country_name, Capital FROM country",
        "question": "Show the country name and capital of all countries.",
        "context": "CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)"
    },
    {
        "answer": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "question": "Show all official native languages that contain the word \"English\".",
        "context": "CREATE TABLE country (Official_native_language VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT POSITION FROM match_season",
        "question": "Show all distinct positions of matches.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)"
    },
    {
        "answer": "SELECT Player FROM match_season WHERE College = \"UCLA\"",
        "question": "Show the players from college UCLA.",
        "context": "CREATE TABLE match_season (Player VARCHAR, College VARCHAR)"
    },
    {
        "answer": "SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = \"Defender\"",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "context": "CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Team) FROM match_season",
        "question": "How many distinct teams are involved in match seasons?",
        "context": "CREATE TABLE match_season (Team VARCHAR)"
    },
    {
        "answer": "SELECT Player, Years_Played FROM player",
        "question": "Show the players and the years played.",
        "context": "CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM Team",
        "question": "Show all team names.",
        "context": "CREATE TABLE Team (Name VARCHAR)"
    },
    {
        "answer": "SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "context": "CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)"
    },
    {
        "answer": "SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"",
        "question": "Show the players and years played for players from team \"Columbus Crew\".",
        "context": "CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)"
    },
    {
        "answer": "SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION",
        "question": "Show the position of players and the corresponding number of players.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)"
    },
    {
        "answer": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
        "question": "Show the country names and the corresponding number of players.",
        "context": "CREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)"
    },
    {
        "answer": "SELECT player FROM match_season ORDER BY College",
        "question": "Return all players sorted by college in ascending alphabetical order.",
        "context": "CREATE TABLE match_season (player VARCHAR, College VARCHAR)"
    },
    {
        "answer": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the most common position of players in match seasons.",
        "context": "CREATE TABLE match_season (POSITION VARCHAR)"
    },
    {
        "answer": "SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "context": "CREATE TABLE match_season (College VARCHAR)"
    },
    {
        "answer": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2",
        "question": "Show the name of colleges that have at least two players.",
        "context": "CREATE TABLE match_season (College VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season)",
        "question": "What are the names of teams that do no have match season record?",
        "context": "CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)"
    },
    {
        "answer": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "context": "CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM climber",
        "question": "How many climbers are there?",
        "context": "CREATE TABLE climber (Id VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM climber ORDER BY Points DESC",
        "question": "List the names of climbers in descending order of points.",
        "context": "CREATE TABLE climber (Name VARCHAR, Points VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM climber WHERE Country <> \"Switzerland\"",
        "question": "List the names of climbers whose country is not Switzerland.",
        "context": "CREATE TABLE climber (Name VARCHAR, Country VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Country) FROM climber",
        "question": "How many distinct countries are the climbers from?",
        "context": "CREATE TABLE climber (Country VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM mountain ORDER BY Name",
        "question": "What are the names of mountains in ascending alphabetical order?",
        "context": "CREATE TABLE mountain (Name VARCHAR)"
    },
    {
        "answer": "SELECT Country FROM mountain WHERE Height > 5000",
        "question": "What are the countries of mountains with height bigger than 5000?",
        "context": "CREATE TABLE mountain (Country VARCHAR, Height INTEGER)"
    },
    {
        "answer": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
        "question": "What is the name of the highest mountain?",
        "context": "CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3",
        "question": "List the distinct ranges of the mountains with the top 3 prominence.",
        "context": "CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)"
    },
    {
        "answer": "SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
        "question": "Show names of climbers and the names of mountains they climb.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)"
    },
    {
        "answer": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1",
        "question": "Show the height of the mountain climbed by the climber with the maximum points.",
        "context": "CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)"
    },
    {
        "answer": "SELECT Country, COUNT(*) FROM climber GROUP BY Country",
        "question": "Please show the countries and the number of climbers from each country.",
        "context": "CREATE TABLE climber (Country VARCHAR)"
    },
    {
        "answer": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1",
        "question": "List the countries that have more than one mountain.",
        "context": "CREATE TABLE mountain (Country VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber)",
        "question": "List the names of mountains that do not have any climber.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)"
    },
    {
        "answer": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
        "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
        "context": "CREATE TABLE mountain (Country VARCHAR, Height INTEGER)"
    },
    {
        "answer": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the range that has the most number of mountains.",
        "context": "CREATE TABLE mountain (Range VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
        "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
        "context": "CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM body_builder",
        "question": "How many body builders are there?",
        "context": "CREATE TABLE body_builder (Id VARCHAR)"
    },
    {
        "answer": "SELECT Total FROM body_builder ORDER BY Total",
        "question": "List the total scores of body builders in ascending order.",
        "context": "CREATE TABLE body_builder (Total VARCHAR)"
    },
    {
        "answer": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch",
        "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.",
        "context": "CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)"
    },
    {
        "answer": "SELECT AVG(Snatch) FROM body_builder",
        "question": "What is the average snatch score of body builders?",
        "context": "CREATE TABLE body_builder (Snatch INTEGER)"
    },
    {
        "answer": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1",
        "question": "What are the clean and jerk score of the body builder with the highest total score?",
        "context": "CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)"
    },
    {
        "answer": "SELECT Birth_Date FROM People ORDER BY Height",
        "question": "What are the birthdays of people in ascending order of height?",
        "context": "CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)"
    },
    {
        "answer": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "question": "What is the name of the body builder with the greatest body weight?",
        "context": "CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)"
    },
    {
        "answer": "SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place",
        "question": "List each birth place along with the number of people from there.",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)"
    },
    {
        "answer": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2",
        "question": "What are the birth places that are shared by at least two people?",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)"
    },
    {
        "answer": "SELECT Height, Weight FROM people ORDER BY Height DESC",
        "question": "List the height and weight of people in descending order of height.",
        "context": "CREATE TABLE people (Height VARCHAR, Weight VARCHAR)"
    },
    {
        "answer": "SELECT * FROM body_builder",
        "question": "Show all information about each body builder.",
        "context": "CREATE TABLE body_builder (Id VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Birth_Place) FROM people",
        "question": "How many distinct birth places are there?",
        "context": "CREATE TABLE people (Birth_Place VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder)",
        "question": "How many persons are not body builders?",
        "context": "CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)"
    },
    {
        "answer": "SELECT MIN(snatch) FROM body_builder",
        "question": "What is the minimum snatch score?",
        "context": "CREATE TABLE body_builder (snatch INTEGER)"
    },
    {
        "answer": "SELECT COUNT(*) FROM election",
        "question": "How many elections are there?",
        "context": "CREATE TABLE election (Id VARCHAR)"
    },
    {
        "answer": "SELECT Votes FROM election ORDER BY Votes DESC",
        "question": "List the votes of elections in descending order.",
        "context": "CREATE TABLE election (Votes VARCHAR)"
    },
    {
        "answer": "SELECT Date, Vote_Percent FROM election",
        "question": "List the dates and vote percents of elections.",
        "context": "CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)"
    },
    {
        "answer": "SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election",
        "question": "What are the minimum and maximum vote percents of elections?",
        "context": "CREATE TABLE election (Vote_Percent INTEGER)"
    },
    {
        "answer": "SELECT Name, Party FROM representative",
        "question": "What are the names and parties of representatives?",
        "context": "CREATE TABLE representative (Name VARCHAR, Party VARCHAR)"
    },
    {
        "answer": "SELECT Name FROM Representative WHERE Party <> \"Republican\"",
        "question": "What are the names of representatives whose party is not \"Republican\"?",
        "context": "CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)"
    },
    {
        "answer": "SELECT Lifespan FROM representative WHERE State = \"New York\" OR State = \"Indiana\"",
        "question": "What are the life spans of representatives from New York state or Indiana state?",
        "context": "CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)"
    },
    {
        "answer": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
        "question": "What are the names of representatives with more than 10000 votes in election?",
        "context": "CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)"
    },
    {
        "answer": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC",
        "question": "What are the lifespans of representatives in descending order of vote percent?",
        "context": "CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)"
    },
    {
        "answer": "SELECT Party, COUNT(*) FROM representative GROUP BY Party",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "context": "CREATE TABLE representative (Party VARCHAR)"
    },
    {
        "answer": "SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the party that has the largest number of representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)"
    },
    {
        "answer": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3",
        "question": "What parties have at least three representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)"
    },
    {
        "answer": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2",
        "question": "What states have at least two representatives?",
        "context": "CREATE TABLE representative (State VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(DISTINCT Party) FROM representative",
        "question": "How many distinct parties are there for representatives?",
        "context": "CREATE TABLE representative (Party VARCHAR)"
    },
    {
        "answer": "SELECT COUNT(*) FROM Apartment_Bookings",
        "question": "How many apartment bookings are there in total?",
        "context": "CREATE TABLE Apartment_Bookings (Id VARCHAR)"
    },
    {
        "answer": "SELECT booking_start_date, booking_end_date FROM Apartment_Bookings",
        "question": "Show the start dates and end dates of all the apartment bookings.",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)"
    },
    {
        "answer": "SELECT DISTINCT building_description FROM Apartment_Buildings",
        "question": "Show all distinct building descriptions.",
        "context": "CREATE TABLE Apartment_Buildings (building_description VARCHAR)"
    },
    {
        "answer": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = \"Emma\"",
        "question": "Show the short names of the buildings managed by \"Emma\".",
        "context": "CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)"
    },
    {
        "answer": "SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = \"Brenden\"",
        "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".",
        "context": "CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)"
    },
    {
        "answer": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"",
        "question": "What are the building full names that contain the word \"court\"?",
        "context": "CREATE TABLE Apartment_Buildings (building_full_name VARCHAR)"
    },
    {
        "answer": "SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments",
        "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
        "context": "CREATE TABLE Apartments (bathroom_count INTEGER)"
    },
    {
        "answer": "SELECT AVG(bedroom_count) FROM Apartments",
        "question": "What is the average number of bedrooms of all apartments?",
        "context": "CREATE TABLE Apartments (bedroom_count INTEGER)"
    },
    {
        "answer": "SELECT apt_number, room_count FROM Apartments",
        "question": "Return the apartment number and the number of rooms for each apartment.",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)"
    },
    {
        "answer": "SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = \"Studio\"",
        "question": "What is the average number of rooms of apartments with type code \"Studio\"?",
        "context": "CREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)"
    },
    {
        "answer": "SELECT apt_number FROM Apartments WHERE apt_type_code = \"Flat\"",
        "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
        "context": "CREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)"
    },
    {
        "answer": "SELECT guest_first_name, guest_last_name FROM Guests",
        "question": "Return the first names and last names of all guests",
        "context": "CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)"
    },
    {
        "answer": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Male\"",
        "question": "Return the date of birth for all the guests with gender code \"Male\".",
        "context": "CREATE TABLE Guests (date_of_birth VARCHAR, gender_code VARCHAR)"
    },
    {
        "answer": "SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2",
        "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?",
        "context": "CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)"
    },
    {
        "answer": "SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = \"Gym\"",
        "question": "Show the total number of rooms of all apartments with facility code \"Gym\".",
        "context": "CREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)"
    },
    {
        "answer": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
        "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
        "context": "CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)"
    }
]